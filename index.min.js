const express=require("express"),fetch=require("node-fetch"),http=require("http"),app=express(),port=3e3;app.use(((e,t,o)=>{t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, PATCH, OPTIONS"),t.header("Access-Control-Allow-Headers","Content-Type, Authorization"),o()})),app.get("/generate",(async(e,t)=>{const{prompt:o,type:s,model:r,key:n}=e.query;if(!o||!n)return t.status(400).json({status:"error",message:"missing prompt or key"});let a=r,i="";const c=Date.now();try{if("openrouter"===s){const e="https://openrouter.ai/api/v1/chat/completions";a||(a="mistralai/mistral-7b-instruct");const t={model:a,messages:[{role:"user",content:o}]},s=await fetch(e,{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json","HTTP-Referer":"http://localhost:3000","X-Title":"node ai api"},body:JSON.stringify(t)});if(!s.ok){const e=await s.text();throw new Error(`openrouter api error: ${s.statusText} - ${e}`)}i=(await s.json()).choices[0].message.content}else if("groq"===s){const e="https://api.groq.com/openai/v1/chat/completions";a||(a="llama3-8b-8192");const t={model:a,messages:[{role:"user",content:o}]},s=await fetch(e,{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok){const e=await s.text();throw new Error(`groq api error: ${s.statusText} - ${e}`)}i=(await s.json()).choices[0].message.content}else{if("google"!==s&&s)return t.status(400).json({status:"error",message:"invalid, use google openrouter or groq"});{const e=`https://generativelanguage.googleapis.com/v1beta/models/${a||"gemini-1.5-flash"}:generateContent?key=${n}`,t={contents:[{parts:[{text:o}]}]},s=await fetch(e,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!s.ok){const e=await s.text();throw new Error(`google api error: ${s.statusText} - ${e}`)}i=(await s.json()).candidates[0].content.parts[0].text}}const e=Date.now()-c;t.json({status:"success",response:i,completionTime:`${e}ms`})}catch(e){console.error("server error",e),t.status(500).json({status:"error",message:`internal error: ${e.message}`})}}));const server=http.createServer(app);server.listen(3e3,(()=>{console.log("Listening on http://localhost:3000")})),process.on("SIGINT",(()=>{console.log("shutting down"),server.close((()=>{console.log("server closed"),process.exit(0)}))})),process.on("SIGTERM",(()=>{console.log("got sigterm signal"),server.close((()=>{console.log("server shut down succesfull"),process.exit(0)}))}));
